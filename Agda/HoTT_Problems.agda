open import HoTT
open import Agda.Primitive

-- Problem 1 --
-- This is defined in HoTT.agda as the operator "‚àò"

-- Problem 1.2 --
recA√óB : ‚àÄ {n} 
        ‚Üí (A B C : Set n) 
        ‚Üí (A ‚Üí B ‚Üí C) 
        ‚Üí A √ó B ‚Üí C

recA√óB = Œª A B C g r ‚Üí g(√ópr‚ÇÅ(r))(√ópr‚ÇÇ(r))

recŒ£    : ‚àÄ {n m}
        ‚Üí (A C : Set n)
        ‚Üí (B : A ‚Üí Set m)
        ‚Üí ((x : A) ‚Üí B x ‚Üí C)
        ‚Üí (Œ£ x ‚à∂ A , B x) ‚Üí C
recŒ£ = Œª A C B g r ‚Üí g (pr‚ÇÅ r) (pr‚ÇÇ r)

-- Problem 1.3 --

indA√óB : ‚àÄ {n m} 
        ‚Üí (A B : Set n) 
        ‚Üí (C : A √ó B ‚Üí  Set m) 
        ‚Üí ((a : A) ‚Üí (b : B) ‚Üí C (a , b)) 
        ‚Üí ((z : A √ó B) ‚Üí C z)
indA√óB {n} {m} = Œª A B C g z ‚Üí ‚â°-transport  n m 
                                    (A √ó B) 
                                    (Œª r ‚Üí C r) 
                                    (√ópr‚ÇÅ z , √ópr‚ÇÇ z) 
                                    z
                                    ((√óuniq z) ‚Åª¬π) 
                                    (g (√ópr‚ÇÅ z) (√ópr‚ÇÇ z))


-- Problem 1.4 --

‚Ñï-iter : ‚àÄ {n} {C : Set n} ‚Üí C ‚Üí (C ‚Üí C) ‚Üí ‚Ñï ‚Üí C
‚Ñï-iter c‚ÇÄ c‚Çõ 0 = c‚ÇÄ
‚Ñï-iter c‚ÇÄ c‚Çõ (succ n) = c‚Çõ (‚Ñï-iter c‚ÇÄ c‚Çõ n)

rec‚Ñï    : ‚àÄ {n} {C : Set n} 
        ‚Üí C
        ‚Üí (‚Ñï ‚Üí C ‚Üí C)
        ‚Üí (‚Ñï ‚Üí C)
rec‚Ñï c‚ÇÄ c‚Çõ 0 = c‚ÇÄ
rec‚Ñï c‚ÇÄ c‚Çõ (succ n) = c‚Çõ n (rec‚Ñï c‚ÇÄ c‚Çõ n)

c‚Çõ'     : ‚àÄ {n} {C : Set n}
        ‚Üí (‚Ñï ‚Üí C ‚Üí C)
        ‚Üí ‚Ñï √ó C ‚Üí ‚Ñï √ó C
c‚Çõ' c‚Çõ = Œª z ‚Üí (succ (√ópr‚ÇÅ z) , c‚Çõ (√ópr‚ÇÅ z)  (√ópr‚ÇÇ z))

rec‚Ñï'   : ‚àÄ {n} {C : Set n} 
        ‚Üí C
        ‚Üí (‚Ñï ‚Üí C ‚Üí C)
        ‚Üí (‚Ñï ‚Üí C)
rec‚Ñï' {i} {C} c‚ÇÄ c‚Çõ n = √ópr‚ÇÇ (‚Ñï-iter  {i} 
                                {‚Ñï √ó C} 
                                (0 , c‚ÇÄ) 
                                (c‚Çõ' {i} {C} c‚Çõ)
                                n
                                ) 
                                
lemma1  : ‚àÄ {i} {C : Set i}
        ‚Üí (c‚ÇÄ : C)
        ‚Üí (c‚Çõ : ‚Ñï ‚Üí C ‚Üí C)
        ‚Üí (n : ‚Ñï)
        ‚Üí (√ópr‚ÇÅ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n) ‚â° n)
lemma1 {i} {C} c‚ÇÄ c‚Çõ 0 = refl 0
lemma1 {i} {C} c‚ÇÄ c‚Çõ (succ n) = ap {lzero} {lzero} {‚Ñï} {‚Ñï} 
                                succ 
                                {√ópr‚ÇÅ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n)}
                                {n}
                                (lemma1 {i} {C} c‚ÇÄ c‚Çõ n)



lemma2  : ‚àÄ {i} {C : Set i}
        ‚Üí (c‚ÇÄ : C)
        ‚Üí (c‚Çõ : ‚Ñï ‚Üí C ‚Üí C)
        ‚Üí (n : ‚Ñï)
        ‚Üí c‚Çõ (√ópr‚ÇÅ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n)) ‚â° (c‚Çõ n)
lemma2 {i} {C} c‚ÇÄ c‚Çõ n = ap {lzero} {i} {‚Ñï} {(C ‚Üí C)}
                            c‚Çõ
                            {(√ópr‚ÇÅ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n))}
                            {n}
                            (lemma1 {i} {C} c‚ÇÄ c‚Çõ n)

lemma3  : ‚àÄ {i} {C : Set i}
        ‚Üí (c‚ÇÄ : C)
        ‚Üí (c‚Çõ : ‚Ñï ‚Üí C ‚Üí C)
        ‚Üí (n : ‚Ñï)
        ‚Üí (√ópr‚ÇÇ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n)) ‚â° (rec‚Ñï c‚ÇÄ c‚Çõ n)
lemma3 {i} {C} c‚ÇÄ c‚Çõ 0 = refl c‚ÇÄ
lemma3 {i} {C} c‚ÇÄ c‚Çõ (succ n) = apf {i} {i} {C} {C}
                                    {(c‚Çõ (√ópr‚ÇÅ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n)))}
                                    {(c‚Çõ n)}
                                    (lemma2 {i} {C} c‚ÇÄ c‚Çõ n)
                                    (√ópr‚ÇÇ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n))
                                    (rec‚Ñï c‚ÇÄ c‚Çõ n)
                                    (lemma3 {i} {C} c‚ÇÄ c‚Çõ n)
                                
proof_rec‚Ñï‚â°rec‚Ñï'    : ‚àÄ {i} {C : Set i}
                    ‚Üí (c‚ÇÄ : C)
                    ‚Üí (c‚Çõ : ‚Ñï ‚Üí C ‚Üí C)
                    ‚Üí (n : ‚Ñï)
                    ‚Üí (rec‚Ñï' c‚ÇÄ c‚Çõ n) ‚â° (rec‚Ñï c‚ÇÄ c‚Çõ n)
proof_rec‚Ñï‚â°rec‚Ñï' {i} {C} c‚ÇÄ c‚Çõ 0 = refl c‚ÇÄ
proof_rec‚Ñï‚â°rec‚Ñï' {i} {C} c‚ÇÄ c‚Çõ (succ n) = apf {i} {i} {C} {C}
                                    {(c‚Çõ (√ópr‚ÇÅ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n)))}
                                    {(c‚Çõ n)}
                                    (lemma2 {i} {C} c‚ÇÄ c‚Çõ n)
                                    (√ópr‚ÇÇ (‚Ñï-iter {i} {‚Ñï √ó C} (0 , c‚ÇÄ) (c‚Çõ' {i} {C} c‚Çõ) n))
                                    (rec‚Ñï c‚ÇÄ c‚Çõ n)
                                    (lemma3 {i} {C} c‚ÇÄ c‚Çõ n)

-- Problem 1.5 --
--_+'_ : {n : Level} (A B : Set n) ‚Üí Set n  
--A +' B = Œ£ x ‚à∂ ùüö , (ùüö-rec A B x)
--
--inl'  : ‚àÄ {n} {A B : Set n} ‚Üí (A ‚Üí A +' B)
--inl' a = (zero , a)
--
--inr'  : ‚àÄ {n} {A B : Set n} ‚Üí (B ‚Üí A +' B)
--inr' b = (one , b)
--
--+'-induction  : ‚àÄ {n m} {A B : Set n} {C : A +' B ‚Üí Set m}
--              ‚Üí ((a : A) ‚Üí C (inl' a))
--              ‚Üí ((b : B) ‚Üí C (inr' b))
--              ‚Üí ((z : A +' B) ‚Üí C z)
--+'-induction {n} {m} {A} {B} {C} f g z = Œ£-induction  {lzero} {n} {m}
--                                                      {ùüö}
--                                                      {Œª x ‚Üí (ùüö-rec A B x)}
--                                                      {C} 
--                                                      z

-- Problem 1.6 --

-- Problem 1.7 --
-- Problem 1.8 --

_‚àô‚Çô_  : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
n ‚àô‚Çô m = ‚Ñï-rec (Œª n ‚Üí 0) (Œª n f ‚Üí (Œª m ‚Üí f(m) +‚Çô m)) n m

_^_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
n ^ m = ‚Ñï-rec (Œª n ‚Üí 0) (Œª n f ‚Üí (Œª m ‚Üí f(m) ‚àô‚Çô m)) n m

-- We prove the properties of a semi ring separately and aggregate them at the end --

--‚Ñï_is_set : is_set ‚Ñï



zero-mult : ((n : ‚Ñï) ‚Üí (0 ‚àô‚Çô n) ‚â° 0)
zero-mult = ‚Ñï-induction (refl 0) (Œª m p ‚Üí refl 0)

zero-add-l : ((n : ‚Ñï) ‚Üí (0 +‚Çô n) ‚â° n)
zero-add-l  = ‚Ñï-induction (refl 0) (Œª m p ‚Üí refl (succ m)) 

zero-add-r : ((n : ‚Ñï) ‚Üí (n +‚Çô 0) ‚â° n)
zero-add-r  = ‚Ñï-induction (refl 0) (Œª n p ‚Üí ap succ p) 

succ-comm : (n m : ‚Ñï) ‚Üí (n +‚Çô (succ m)) ‚â° ((succ n) +‚Çô m)
succ-comm = ‚Ñï-induction (Œª m ‚Üí refl (succ m)) 
                        (Œª n p m ‚Üí ap succ (p m))

lemma-add-comm : (n m : ‚Ñï) ‚Üí ((succ n) +‚Çô m) ‚â° (m +‚Çô (succ n))
lemma-add-comm n = ‚Ñï-induction  ((zero-add-r (succ n)) ‚àô ((zero-add-l (succ n)) ‚Åª¬π))
                                (Œª m p ‚Üí (ap succ (succ-comm n m)) ‚àô (ap succ p))

add-comm : ((n m : ‚Ñï) ‚Üí (n +‚Çô m) ‚â° (m +‚Çô n))
add-comm = ‚Ñï-induction  (Œª m ‚Üí (zero-add-l m) ‚àô ((zero-add-r m) ‚Åª¬π))
                        (Œª n p m ‚Üí (lemma-add-comm n m))

add-assoc : (n m l : ‚Ñï) ‚Üí ((n +‚Çô m) +‚Çô l) ‚â° (n +‚Çô (m +‚Çô l))
add-assoc = ‚Ñï-induction (Œª m l ‚Üí refl (m +‚Çô l))
                        (Œª n p m l ‚Üí ap succ (p m l))


succ‚â°n+1 :  (n : ‚Ñï) ‚Üí (succ n) ‚â° (n +‚Çô 1)
succ‚â°n+1 = ‚Ñï-induction  (refl 1)
                        (Œª n p ‚Üí ap succ p)


mult-assoc : (n m l : ‚Ñï) ‚Üí ((n ‚àô‚Çô m) ‚àô‚Çô l) ‚â° (n ‚àô‚Çô (m ‚àô‚Çô l))
mult-assoc = ‚Ñï-induction (Œª m l ‚Üí refl 0)
                        (Œª n p m l ‚Üí ap succ (p m l))
--
-- is_semi_ring A =  Œ£ zero ‚à∂ A ,
--                    Œ£ _+‚Çê_ ‚à∂ (A ‚Üí A ‚Üí A) , 
--                    Œ£ _‚àô‚Çê_ ‚à∂ (A ‚Üí A ‚Üí A) , 
--                    (is_set A) 
--                    √ó ((n : A) ‚Üí (zero +‚Çê n) ‚â° n)
--                    √ó ((n : A) ‚Üí (n ‚àô‚Çê zero) ‚â° zero)
--                    √ó ((n m : A) ‚Üí (n +‚Çê m) ‚â° (m +‚Çê n))
--                    √ó ((n m l : A) ‚Üí ((n +‚Çê m) +‚Çê l) ‚â° (n +‚Çê (m +‚Çê l)))
--                    √ó ((n m l : A) ‚Üí ((n ‚àô‚Çê m) ‚àô‚Çê l) ‚â° (n ‚àô‚Çê (m ‚àô‚Çê l)))
--                    √ó ((n : A) ‚Üí (n ‚àô‚Çô 1) ‚â° n)
--                    √ó ((n : A) ‚Üí (1 ‚àô‚Çô n) ‚â° n)
--                    √ó ((n m l : A) ‚Üí (n ‚àô‚Çê (m +‚Çê l)) ‚â° ((n ‚àô‚Çê m)  +‚Çê (n ‚àô‚Çê l)))
